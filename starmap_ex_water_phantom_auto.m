function starmap_ex_water_phantom_auto
%STARMAP_EX_WATER_PHANTOM_AUTO
%   Example case for STARMAP_SOLVER, a second order staggered
%   grid finite difference solver for linear hyperbolic moment
%   approximations to radiative transfer in 3D geometry.
%
%   Created by the file starmap_create_water_phantom.m
%
%   Version 2.01
%   Copyright (c) 06/28/2022 Benjamin Seibold, Martin Frank, and
%                            Rujeko Chinomona
%   http://www.math.temple.edu/~seibold
%   https://www.scc.kit.edu/personen/martin.frank.php
%   https://rujekoc.github.io/
%   
%   Contributers: Edgar Olbrant (v1.0), Kerstin Kuepper (v1.5,v2.01).
%   
%   StaRMAP project website:
%   https://github.com/starmap-project

%   For license, see files LICENSE.txt or starmap_solver.m, as published on
%   https://github.com/starmap-project/starmap

%========================================================================
% Problem Parameters
%========================================================================
prob = struct(...
'name','Phantom Test',... % name of example
'closure','P',... % type of closure (can be 'P' or 'SP')
'n_mom',13,... % order of moment approximation
'sigma_s0',@sigma_s0,... % isotropic scattering coefficient (def. below)
'sigma_sm',@sigma_sm,... % aniso. scattering coefficient (defined below)
'ic',@initial,... % initial condition
'ax',[0 10  0 10  0 10],... % coordinates of computational domain
'n',[200   1   1],... % numbers of grid cells in each coordinate direction
'bc',[1 1 1],... % type of boundary cond. (0 = periodic, 1 = extrapolation)
'E_plot',[5 4 3 2 1 0],... % output times
'output',@output,... % output routine (defined below)
'density',@density...
);

%========================================================================
% Moment System Setup and Solver Execution
%========================================================================
par = starmap_init(prob);     % Configure data structures for starmap solver

% Modify functions and run solver.
E_CutOff = max(par.E_plot);
par.t_plot = Energy2Time(par.E_plot,E_CutOff);
par.sigma_s0 = @(x,y,z,t)par.sigma_s0(x,y,z,Time2Energy(t,E_CutOff));
par.sigma_sm = @(x,y,z,m,t)par.sigma_sm(x,y,z,m,Time2Energy(t,E_CutOff));
par.int_weight = @(m,t)StoppingPower(Time2Energy(t,E_CutOff)).*(m==1);
figure
solution = starmap_solver(par);

% Compute and plot depth dose
x = solution(1).x; y = solution(1).y; z = solution(1).z;
[X,Y,Z] = ndgrid(x,y,z);
Rho = density(X,Y,Z,par);
Dose = solution(1).Int./Rho;
figure, plot(x,Dose(:,1,1))
xlabel('x [cm]'), ylabel('dose')
title([par.name,': depth dose'])

%========================================================================
% Problem Specific Functions
%========================================================================
function f = sigma_s0(x,y,z,E)
% Total scattering coefficient.
f = feval(@(E,m)TransportCoefElectronsP39(E,'tot',m),E,0);

function f = sigma_sm(x,y,z,m,E)
% Moments of scattering kernel.
f = feval(@(E,m)TransportCoefElectronsP39(E,'tot',m),E,m);

function f = density(x,y,z,par)
% Problem specific density function.
f = 1;

function f = initial(x,y,z,k)
% Initial conditions (for (k-1)-st moment).
pos_beam = [2 5 5];
f = feval(@(x,y,z)normpdf(x,pos_beam(1),.1).*((pos_beam(2)-5)<y&y<(pos_beam(2)+5)).*((pos_beam(3)-5)<z&z<(pos_beam(3)+5)),x,y,z);
StarMAPmoments = [
  0.28209479
  0.48860251
 -0.00000000
  0.00000000
  0.54627422
 -0.00000000
  0.00000000
  0.00000000
 -0.31539157
  0.59004359
 -0.00000000
  0.00000000
  0.00000000
 -0.45704580
  0.00000000
  0.00000000
  0.62583574
 -0.00000000
  0.00000000
  0.00000000
 -0.47308735
  0.00000000
  0.00000000
  0.00000000
  0.31735664
  0.65638206
 -0.00000000
  0.00000000
  0.00000000
 -0.48923830
  0.00000000
  0.00000000
  0.00000000
  0.45294665
 -0.00000000
  0.00000000
  0.68318411
 -0.00000000
  0.00000000
  0.00000000
 -0.50456490
  0.00000000
  0.00000000
  0.00000000
  0.46060263
 -0.00000000
  0.00000000
  0.00000000
 -0.31784601
  0.70716273
 -0.00000000
  0.00000000
  0.00000000
 -0.51891558
  0.00000000
  0.00000000
  0.00000000
  0.46937680
 -0.00000000
  0.00000000
  0.00000000
 -0.45165804
  0.00000000
  0.00000000
  0.72892666
 -0.00000000
  0.00000000
  0.00000000
 -0.53233277
  0.00000000
  0.00000000
  0.00000000
  0.47841652
 -0.00000000
  0.00000000
  0.00000000
 -0.45615226
  0.00000000
  0.00000000
  0.00000000
  0.31803697
  0.74890095
 -0.00000000
  0.00000000
  0.00000000
 -0.54490548
  0.00000000
  0.00000000
  0.00000000
  0.48737828
 -0.00000000
  0.00000000
  0.00000000
 -0.46170852
  0.00000000
  0.00000000
  0.00000000
  0.45109311
 -0.00000000
  0.00000000
  0.76739512
 -0.00000000
  0.00000000
  0.00000000
 -0.55672693
  0.00000000
  0.00000000
  0.00000000
  0.49611762
 -0.00000000
  0.00000000
  0.00000000
 -0.46774418
  0.00000000
  0.00000000
  0.00000000
  0.45405113
 -0.00000000
  0.00000000
  0.00000000
 -0.31813049
  0.78464211
 -0.00000000
  0.00000000
  0.00000000
 -0.56788226
  0.00000000
  0.00000000
  0.00000000
  0.50457663
 -0.00000000
  0.00000000
  0.00000000
 -0.47396722
  0.00000000
  0.00000000
  0.00000000
  0.45789583
 -0.00000000
  0.00000000
  0.00000000
 -0.45079624
  0.00000000
  0.00000000
  0.80082200
 -0.00000000
  0.00000000
  0.00000000
 -0.57844583
  0.00000000
  0.00000000
  0.00000000
  0.51273743
 -0.00000000
  0.00000000
  0.00000000
 -0.48022260
  0.00000000
  0.00000000
  0.00000000
  0.46223031
 -0.00000000
  0.00000000
  0.00000000
 -0.45289136
  0.00000000
  0.00000000
  0.00000000
  0.31818309
  0.81607712
  0.00000000
  0.00000000
  0.00000000
 -0.58848158
  0.00000000
  0.00000000
  0.00000000
  0.52060125
 -0.00000000
  0.00000000
  0.00000000
 -0.48642544
  0.00000000
  0.00000000
  0.00000000
  0.46682972
 -0.00000000
  0.00000000
  0.00000000
 -0.45571314
  0.00000000
  0.00000000
  0.00000000
  0.45062121
 -0.00000000
  0.00000000
];
f = f*StarMAPmoments(k);

function f = StoppingPower(E)
% Stopping Power.
f = feval(@(E)StoppingPowerElectrons(E,278,'tot'),E);

function output(par,x,y,z,U,step)
% Output function showing the progress.
E = par.E_plot(step);
fprintf('Energy:%12.2fMeV\n',E)
plot(x,U(:,1,1)), hold on
title([par.name,': E = ',num2str(E),'MeV']);
xlabel('x [cm]'), ylabel('zeroth-moment')
drawnow

%========================================================================
% Energy transformation.
%========================================================================
function E = Time2Energy(t,E_CutOff)
% Transformation: Time to energy.
E = max(0,energyTansform(energyTansform(E_CutOff,0)-t',1))';

function t = Energy2Time(E,E_CutOff)
% Transformation: Energy to time.
t = max(0,energyTansform(E_CutOff-E',0))';

function TE = energyTansform(E,inv)
% Transform the energy using linear interpolation.
E_tab = [
  0.00005000
  0.00006000
  0.00007000
  0.00008000
  0.00009000
  0.00010000
  0.00012500
  0.00015000
  0.00017500
  0.00020000
  0.00025000
  0.00030000
  0.00035000
  0.00040000
  0.00045000
  0.00050000
  0.00060000
  0.00070000
  0.00080000
  0.00090000
  0.00100000
  0.00125000
  0.00150000
  0.00175000
  0.00200000
  0.00250000
  0.00300000
  0.00350000
  0.00400000
  0.00450000
  0.00500000
  0.00600000
  0.00700000
  0.00800000
  0.00900000
  0.01000000
  0.01250000
  0.01500000
  0.01750000
  0.02000000
  0.02500000
  0.03000000
  0.03500000
  0.04000000
  0.04500000
  0.05000000
  0.06000000
  0.07000000
  0.08000000
  0.09000000
  0.10000000
  0.12500000
  0.15000000
  0.17500000
  0.20000000
  0.25000000
  0.30000000
  0.35000000
  0.40000000
  0.45000000
  0.50000000
  0.60000000
  0.70000000
  0.80000000
  0.90000000
  1.00000000
  1.25000000
  1.50000000
  1.75000000
  2.00000000
  2.50000000
  3.00000000
  3.50000000
  4.00000000
  4.50000000
  5.00000000
  6.00000000
  7.00000000
  8.00000000
  9.00000000
 10.00000000
 12.50000000
 15.00000000
 17.50000000
 20.00000000
 25.00000000
 30.00000000
 35.00000000
 40.00000000
 45.00000000
 50.00000000
 60.00000000
 70.00000000
 80.00000000
 90.00000000
100.00000000
125.00000000
150.00000000
175.00000000
200.00000000
250.00000000
300.00000000
350.00000000
400.00000000
450.00000000
500.00000000
600.00000000
700.00000000
800.00000000
900.00000000
1000.00000000
];
E_trans = [
  0.00000000
  0.00000003
  0.00000005
  0.00000008
  0.00000010
  0.00000012
  0.00000019
  0.00000025
  0.00000032
  0.00000040
  0.00000056
  0.00000074
  0.00000094
  0.00000115
  0.00000139
  0.00000164
  0.00000219
  0.00000281
  0.00000349
  0.00000423
  0.00000503
  0.00000727
  0.00000982
  0.00001268
  0.00001583
  0.00002302
  0.00003133
  0.00004073
  0.00005118
  0.00006265
  0.00007514
  0.00010303
  0.00013474
  0.00017015
  0.00020916
  0.00025168
  0.00037280
  0.00051443
  0.00067574
  0.00085601
  0.00127074
  0.00175467
  0.00230417
  0.00291610
  0.00358765
  0.00431628
  0.00593463
  0.00775569
  0.00976489
  0.01194933
  0.01429742
  0.02080739
  0.02813854
  0.03617646
  0.04482673
  0.06363014
  0.08408959
  0.10583774
  0.12859951
  0.15216623
  0.17638099
  0.22626057
  0.27760375
  0.32995349
  0.38300115
  0.43653241
  0.57147911
  0.70718625
  0.84291833
  0.97830062
  1.24728607
  1.51351565
  1.77682635
  2.03725247
  2.29489423
  2.54987043
  3.05235322
  3.54549379
  4.03000023
  4.50646156
  4.97537287
  6.11760947
  7.22029542
  8.28734912
  9.32182484
 11.30353595
 13.17999838
 14.96335835
 16.66326130
 18.28755912
 19.84292382
 22.77184827
 25.48526839
 28.01267457
 30.37776924
 32.60004307
 37.64405937
 42.07735627
 46.03152811
 49.59970748
 55.85787485
 61.19700674
 65.85324342
 69.98187149
 73.69030148
 77.05609581
 82.99736493
 88.10216461
 92.57711656
 96.56071719
100.15035659
];
if inv==0
    TE = interp1q(E_tab,E_trans,E);
else
    TE = interp1q(E_trans,E_tab,E);
end
